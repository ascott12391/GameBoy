//
//  cpu.hpp
//  Gameboy
//
//  Created by Alex on 8/15/22.
//

#ifndef cpu_hpp
#define cpu_hpp

#include <stdio.h>
#include <stdint.h>
#include <stack>
using namespace std;

struct reg{
    uint8_t hi;
    uint8_t lo;
};

class CPU{
private:
    bool video[160][64];
    uint8_t memory[8000];
    uint8_t vRAM[8000];
    reg registers[4];
    //Register 1 is the flag, depending on what bit is flipped means different things
    //Bit 7 is the zero flag, set if last operation resulted in zero
    //Bit 6 and 5 is only for the DAA instruction, 6 is set if it was a subtraction, and 5 is the carry for it
    //Bit 4 is the regular carry
    //2 8-bit registers can also be combined to make one 16 bit register, which is what is up w/ this funky struct thingie going on up above.
    //Reg 0 is AF, 1 is BC, 2 is DE and 3 is HL
    uint16_t pc;
    stack<uint16_t> callStack;
    int timer;
    void OP_00();
    void OP_01();
    void OP_02();
    void OP_03();
    void OP_04();
    void OP_05();
    void OP_06();
    void OP_07();
    void OP_08();
    void OP_09();
    void OP_0A();
    void OP_0B();
    void OP_0C();
    void OP_0D();
    void OP_0E();
    void OP_0F();
    void OP_10();
    void OP_11();
    void OP_12();
    void OP_13();
    void OP_14();
    void OP_15();
    void OP_16();
    void OP_17();
    void OP_18();
    void OP_19();
    void OP_1A();
    void OP_1B();
    void OP_1C();
    void OP_1D();
    void OP_1E();
    void OP_1F();
    void OP_20();
    void OP_21();
    void OP_22();
    void OP_23();
    void OP_24();
    void OP_25();
    void OP_26();
    void OP_27();
    void OP_28();
    void OP_29();
    void OP_2A();
    void OP_2B();
    void OP_2C();
    void OP_2D();
    void OP_2E();
    void OP_2F();
    void OP_30();
    void OP_31();
    void OP_32();
    void OP_33();
    void OP_34();
    void OP_35();
    void OP_36();
    void OP_37();
    void OP_38();
    void OP_39();
    void OP_3A();
    void OP_3B();
    void OP_3C();
    void OP_3D();
    void OP_3E();
    void OP_3F();
    void OP_40();
    void OP_41();
    void OP_42();
    void OP_43();
    void OP_44();
    void OP_45();
    void OP_46();
    void OP_47();
    void OP_48();
    void OP_49();
    void OP_4A();
    void OP_4B();
    void OP_4C();
    void OP_4D();
    void OP_4E();
    void OP_4F();
    void OP_50();
    void OP_51();
    void OP_52();
    void OP_53();
    void OP_54();
    void OP_55();
    void OP_56();
    void OP_57();
    void OP_58();
    void OP_59();
    void OP_5A();
    void OP_5B();
    void OP_5C();
    void OP_5D();
    void OP_5E();
    void OP_5F();
    void OP_60();
    void OP_61();
    void OP_62();
    void OP_63();
    void OP_64();
    void OP_65();
    void OP_66();
    void OP_67();
    void OP_68();
    void OP_69();
    void OP_6A();
    void OP_6B();
    void OP_6C();
    void OP_6D();
    void OP_6E();
    void OP_6F();
    void OP_70();
    void OP_71();
    void OP_72();
    void OP_73();
    void OP_74();
    void OP_75();
    void OP_76();
    void OP_77();
    void OP_78();
    void OP_79();
    void OP_7A();
    void OP_7B();
    void OP_7C();
    void OP_7D();
    void OP_7E();
    void OP_7F();
    void OP_80();
    void OP_81();
    void OP_82();
    void OP_83();
    void OP_84();
    void OP_85();
    void OP_86();
    void OP_87();
    void OP_88();
    void OP_89();
    void OP_8A();
    void OP_8B();
    void OP_8C();
    void OP_8D();
    void OP_8E();
    void OP_8F();
    void OP_90();
    void OP_91();
    void OP_92();
    void OP_93();
    void OP_94();
    void OP_95();
    void OP_96();
    void OP_97();
    void OP_98();
    void OP_99();
    void OP_9A();
    void OP_9B();
    void OP_9C();
    void OP_9D();
    void OP_9E();
    void OP_9F();
    void OP_A0();
    void OP_A1();
    void OP_A2();
    void OP_A3();
    void OP_A4();
    void OP_A5();
    void OP_A6();
    void OP_A7();
    void OP_A8();
    void OP_A9();
    void OP_AA();
    void OP_AB();
    void OP_AC();
    void OP_AD();
    void OP_AE();
    void OP_AF();
    void OP_B1();
    void OP_B2();
    void OP_B3();
    void OP_B4();
    void OP_B5();
    void OP_B6();
    void OP_B7();
    void OP_B8();
    void OP_B9();
    void OP_BA();
    void OP_BB();
    void OP_BC();
    void OP_BD();
    void OP_BE();
    void OP_BF();
    void OP_C1();
    void OP_C2();
    void OP_C3();
    void OP_C4();
    void OP_C5();
    void OP_C6();
    void OP_C7();
    void OP_C8();
    void OP_C9();
    void OP_CA();
    void OP_CC();
    void OP_CD();
    void OP_CE();
    void OP_CF();
    void OP_D1();
    void OP_D2();
    void OP_D4();
    void OP_D5();
    void OP_D6();
    void OP_D7();
    void OP_D8();
    void OP_D9();
    void OP_DA();
    void OP_DC();
    void OP_DE();
    void OP_DF();
    void OP_E1();
    void OP_E2();
    void OP_E5();
    void OP_E6();
    void OP_E7();
    void OP_E8();
    void OP_E9();
    void OP_EA();
    void OP_EF();
    void OP_F1();
    void OP_F2();
    void OP_F3();
    void OP_F5();
    void OP_F6();
    void OP_F7();
    void OP_F8();
    void OP_F9();
    void OP_FA();
    void OP_FB();
    void OP_FE();
    void OP_FF();
    void OP_CB00();
    void OP_CB01();
    void OP_CB02();
    void OP_CB03();
    void OP_CB04();
    void OP_CB05();
    void OP_CB06();
    void OP_CB07();
    void OP_CB08();
    void OP_CB09();
    void OP_CB0A();
    void OP_CB0B();
    void OP_CB0C();
    void OP_CB0D();
    void OP_CB0E();
    void OP_CB0F();
    void OP_CB10();
    void OP_CB11();
    void OP_CB12();
    void OP_CB13();
    void OP_CB14();
    void OP_CB15();
    void OP_CB16();
    void OP_CB17();
    void OP_CB18();
    void OP_CB19();
    void OP_CB1A();
    void OP_CB1B();
    void OP_CB1C();
    void OP_CB1D();
    void OP_CB1E();
    void OP_CB1F();
    void OP_CB20();
    void OP_CB21();
    void OP_CB22();
    void OP_CB23();
    void OP_CB24();
    void OP_CB25();
    void OP_CB26();
    void OP_CB27();
    void OP_CB28();
    void OP_CB29();
    void OP_CB2A();
    void OP_CB2B();
    void OP_CB2C();
    void OP_CB2D();
    void OP_CB2E();
    void OP_CB2F();
    void OP_CB30();
    void OP_CB31();
    void OP_CB32();
    void OP_CB33();
    void OP_CB34();
    void OP_CB35();
    void OP_CB36();
    void OP_CB37();
    void OP_CB38();
    void OP_CB39();
    void OP_CB3A();
    void OP_CB3B();
    void OP_CB3C();
    void OP_CB3D();
    void OP_CB3E();
    void OP_CB3F();
    void OP_CB40();
    void OP_CB41();
    void OP_CB42();
    void OP_CB43();
    void OP_CB44();
    void OP_CB45();
    void OP_CB46();
    void OP_CB47();
    void OP_CB48();
    void OP_CB49();
    void OP_CB4A();
    void OP_CB4B();
    void OP_CB4C();
    void OP_CB4D();
    void OP_CB4E();
    void OP_CB4F();
    void OP_CB50();
    void OP_CB51();
    void OP_CB52();
    void OP_CB53();
    void OP_CB54();
    void OP_CB55();
    void OP_CB56();
    void OP_CB57();
    void OP_CB58();
    void OP_CB59();
    void OP_CB5A();
    void OP_CB5B();
    void OP_CB5C();
    void OP_CB5D();
    void OP_CB5E();
    void OP_CB5F();
    void OP_CB60();
    void OP_CB61();
    void OP_CB62();
    void OP_CB63();
    void OP_CB64();
    void OP_CB65();
    void OP_CB66();
    void OP_CB67();
    void OP_CB68();
    void OP_CB69();
    void OP_CB70();
    void OP_CB71();
    void OP_CB72();
    void OP_CB73();
    void OP_CB74();
    void OP_CB75();
    void OP_CB76();
    void OP_CB77();
    void OP_CB78();
    void OP_CB79();
    void OP_CB7A();
    void OP_CB7B();
    void OP_CB7C();
    void OP_CB7D();
    void OP_CB7E();
    void OP_CB7F();
    void OP_CB80();
    void OP_CB81();
    void OP_CB82();
    void OP_CB83();
    void OP_CB84();
    void OP_CB85();
    void OP_CB86();
    void OP_CB87();
    void OP_CB88();
    void OP_CB89();
    void OP_CB8A();
    void OP_CB8B();
    void OP_CB8C();
    void OP_CB8D();
    void OP_CB8E();
    void OP_CB8F();
    void OP_CB90();
    void OP_CB91();
    void OP_CB92();
    void OP_CB93();
    void OP_CB94();
    void OP_CB95();
    void OP_CB96();
    void OP_CB97();
    void OP_CB98();
    void OP_CB99();
    void OP_CB9A();
    void OP_CB9B();
    void OP_CB9C();
    void OP_CB9D();
    void OP_CB9E();
    void OP_CB9F();
    void OP_CBA0();
    void OP_CBA1();
    void OP_CBA2();
    void OP_CBA3();
    void OP_CBA4();
    void OP_CBA5();
    void OP_CBA6();
    void OP_CBA7();
    void OP_CBA8();
    void OP_CBA9();
    void OP_CBAA();
    void OP_CBAB();
    void OP_CBAC();
    void OP_CBAD();
    void OP_CBAE();
    void OP_CBAF();
    void OP_CBB0();
    void OP_CBB1();
    void OP_CBB2();
    void OP_CBB3();
    void OP_CBB4();
    void OP_CBB5();
    void OP_CBB6();
    void OP_CBB7();
    void OP_CBB8();
    void OP_CBB9();
    void OP_CBBA();
    void OP_CBBB();
    void OP_CBBC();
    void OP_CBBD();
    void OP_CBBE();
    void OP_CBBF();
    void OP_CBC0();
    void OP_CBC1();
    void OP_CBC2();
    void OP_CBC3();
    void OP_CBC4();
    void OP_CBC5();
    void OP_CBC6();
    void OP_CBC7();
    void OP_CBC8();
    void OP_CBC9();
    void OP_CBCA();
    void OP_CBCB();
    void OP_CBCC();
    void OP_CBCD();
    void OP_CBCE();
    void OP_CBCF();
    void OP_CBD0();
    void OP_CBD1();
    void OP_CBD2();
    void OP_CBD3();
    void OP_CBD4();
    void OP_CBD5();
    void OP_CBD6();
    void OP_CBD7();
    void OP_CBD8();
    void OP_CBD9();
    void OP_CBDA();
    void OP_CBDB();
    void OP_CBDC();
    void OP_CBDD();
    void OP_CBDE();
    void OP_CBDF();
    void OP_CBE0();
    void OP_CBE1();
    void OP_CBE2();
    void OP_CBE3();
    void OP_CBE4();
    void OP_CBE5();
    void OP_CBE6();
    void OP_CBE7();
    void OP_CBE8();
    void OP_CBE9();
    void OP_CBEA();
    void OP_CBEB();
    void OP_CBEC();
    void OP_CBED();
    void OP_CBEE();
    void OP_CBEF();
    void OP_CBF0();
    void OP_CBF1();
    void OP_CBF2();
    void OP_CBF3();
    void OP_CBF4();
    void OP_CBF5();
    void OP_CBF6();
    void OP_CBF7();
    void OP_CBF8();
    void OP_CBF9();
    void OP_CBFA();
    void OP_CBFB();
    void OP_CBFC();
    void OP_CBFD();
    void OP_CBFE();
    void OP_CBFF();
    uint8_t readByte(uint16_t loc);
    uint16_t readWord(uint16_t loc);
    void writeByte(uint16_t loc, uint8_t data);
    void writeWord(uint16_t loc, uint16_t data);
    void setCarry();
    void setZero();
    void setHalfCarry();
    void setSub();
    void resCarry();
    void resZero();
    void resHalfCarry();
    void resSub();
    bool checkCarry();
    bool checkZero();
    bool checkHalfCarry();
    bool checkSub();
    uint16_t findAddr(int reg);
};

#endif /* cpu_hpp */
